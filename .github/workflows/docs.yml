name: 📚 Documentation
# Automated documentation generation, validation, and deployment

on:
  push:
    branches: [main, master]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'scripts/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Documentation action'
        required: false
        default: 'validate_and_generate'
        type: choice
        options:
          - validate_and_generate
          - validate_only
          - generate_only
          - deploy_only
      force_generation:
        description: 'Force regeneration of all documentation'
        required: false
        default: false
        type: boolean

env:
  DOCS_DIR: 'docs'
  SCRIPTS_DIR: 'scripts'

jobs:
  # Job 1: Documentation Validation
  validate-docs:
    name: 🔍 Validate Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 📦 Install Documentation Tools
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests
          
          # Install Node.js tools for markdown validation
          sudo npm install -g markdownlint-cli
      
      - name: 📋 Validate Markdown Syntax
        run: |
          echo "## 📋 Markdown Validation Results" >> $GITHUB_STEP_SUMMARY
          
          # Find all markdown files
          markdown_files=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" 2>/dev/null || echo "")
          
          if [ -z "$markdown_files" ]; then
            echo "ℹ️ No markdown files found to validate" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "**Files validated:**" >> $GITHUB_STEP_SUMMARY
          total_issues=0
          
          for file in $markdown_files; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
            
            if markdownlint "$file" 2>&1 | tee "markdownlint_$(basename "$file" .md).txt"; then
              echo "  ✅ No issues" >> $GITHUB_STEP_SUMMARY
            else
              issues=$(markdownlint "$file" 2>&1 | wc -l)
              total_issues=$((total_issues + issues))
              echo "  ❌ $issues issues found" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total issues:** $total_issues" >> $GITHUB_STEP_SUMMARY
          
          if [ $total_issues -gt 5 ]; then
            echo "⚠️ Many markdown issues found, but not failing build" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Markdown validation completed successfully" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 📊 Documentation Structure Validation
        run: |
          echo "### 📊 Documentation Structure" >> $GITHUB_STEP_SUMMARY
          
          # Check for essential documentation files
          essential_docs=(
            "README.md"
          )
          
          recommended_docs=(
            "docs/SETUP.md"
            "docs/DEVELOPMENT_WORKFLOW.md"
            "docs/API_REFERENCE.md"
            "docs/TROUBLESHOOTING.md"
            "docs/CONTRIBUTING.md"
            "SECURITY.md"
            "LICENSE"
          )
          
          echo "**Essential Documentation:**" >> $GITHUB_STEP_SUMMARY
          missing_essential=0
          
          for doc in "${essential_docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "✅ \`$doc\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ \`$doc\` (required)" >> $GITHUB_STEP_SUMMARY
              missing_essential=$((missing_essential + 1))
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Recommended Documentation:**" >> $GITHUB_STEP_SUMMARY
          missing_recommended=0
          
          for doc in "${recommended_docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "✅ \`$doc\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ \`$doc\` (recommended)" >> $GITHUB_STEP_SUMMARY
              missing_recommended=$((missing_recommended + 1))
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Summary:**" >> $GITHUB_STEP_SUMMARY
          echo "- Missing essential: $missing_essential" >> $GITHUB_STEP_SUMMARY
          echo "- Missing recommended: $missing_recommended" >> $GITHUB_STEP_SUMMARY
          
          if [ $missing_essential -gt 0 ]; then
            echo "❌ Essential documentation missing!" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ $missing_recommended -gt 3 ]; then
            echo "⚠️ Many recommended docs missing, consider adding them" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Documentation structure looks good" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 2: Generate Documentation
  generate-docs:
    name: 📝 Generate Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-docs]
    if: github.event.inputs.action != 'validate_only'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 📦 Install Documentation Generators
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 pyyaml requests python-dateutil
      
      - name: 📁 Create Documentation Structure
        run: |
          mkdir -p docs/{api,guides,examples,scripts}
      
      - name: 📝 Generate Script Documentation
        run: |
          python3 << 'EOF'
          import os
          import re
          import json
          from datetime import datetime
          from pathlib import Path
          
          def extract_script_info(script_path):
              """Extract documentation from script file."""
              with open(script_path, 'r', encoding='utf-8') as f:
                  content = f.read()
              
              info = {
                  'name': os.path.basename(script_path),
                  'path': script_path,
                  'size': len(content),
                  'description': '',
                  'usage': '',
                  'parameters': [],
                  'examples': [],
                  'dependencies': []
              }
              
              # Extract description from header comments
              lines = content.split('\n')
              in_header = False
              description_lines = []
              
              for line in lines[:50]:  # Check first 50 lines
                  if line.strip().startswith('#!/'):
                      in_header = True
                      continue
                  elif in_header and (line.startswith('#') or line.startswith('"""')):
                      desc_line = line.lstrip('#').lstrip('"').strip()
                      if desc_line and not desc_line.startswith('!/'):
                          description_lines.append(desc_line)
                  elif in_header and line.strip() and not line.startswith('#'):
                      break
              
              info['description'] = ' '.join(description_lines[:3])  # First 3 lines
              
              # Extract usage patterns
              usage_patterns = re.findall(r'Usage:?\s*(.+)', content, re.IGNORECASE)
              if usage_patterns:
                  info['usage'] = usage_patterns[0].strip()
              
              # Extract examples
              example_patterns = re.findall(r'Example:?\s*(.+)', content, re.IGNORECASE | re.MULTILINE)
              info['examples'] = [ex.strip() for ex in example_patterns[:3]]
              
              # Extract dependencies (imports, requires)
              dep_patterns = re.findall(r'(?:import|from|require)\s+([a-zA-Z_][a-zA-Z0-9_]*)', content)
              info['dependencies'] = list(set(dep_patterns))
              
              return info
          
          def generate_script_docs():
              """Generate documentation for all scripts."""
              scripts_dir = Path('scripts')
              if not scripts_dir.exists():
                  print("Scripts directory not found")
                  return
              
              script_docs = []
              
              for script_file in scripts_dir.glob('*'):
                  if script_file.is_file() and (script_file.suffix in ['.sh', '.py'] or script_file.name.endswith('.sh')):
                      try:
                          info = extract_script_info(script_file)
                          script_docs.append(info)
                      except Exception as e:
                          print(f"Failed to process {script_file}: {e}")
              
              # Generate scripts documentation
              docs_content = f"""# 🛠️ Scripts Documentation
          
          Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
          
          This document provides an overview of all scripts in the development workflow.
          
          ## 📋 Scripts Overview
          
          | Script | Type | Size | Description |
          |--------|------|------|-------------|
          """
              
              for script in sorted(script_docs, key=lambda x: x['name']):
                  script_type = "Shell" if script['name'].endswith('.sh') else "Python"
                  size_kb = round(script['size'] / 1024, 1)
                  desc = script['description'][:80] + '...' if len(script['description']) > 80 else script['description']
                  docs_content += f"| `{script['name']}` | {script_type} | {size_kb}KB | {desc} |\n"
              
              docs_content += "\n## 📖 Detailed Documentation\n\n"
              
              for script in sorted(script_docs, key=lambda x: x['name']):
                  docs_content += f"""### {script['name']}
          
          **Type:** {'Shell Script' if script['name'].endswith('.sh') else 'Python Script'}  
          **Size:** {round(script['size'] / 1024, 1)}KB  
          **Path:** `{script['path']}`
          
          **Description:**  
          {script['description'] or 'No description available.'}
          
          """
                  
                  if script['usage']:
                      docs_content += f"""**Usage:**  
          ```bash
          {script['usage']}
          ```
          
          """
                  
                  if script['examples']:
                      docs_content += "**Examples:**\n"
                      for example in script['examples']:
                          docs_content += f"- `{example}`\n"
                      docs_content += "\n"
                  
                  if script['dependencies']:
                      docs_content += f"**Dependencies:** {', '.join(script['dependencies'][:5])}\n\n"
                  
                  docs_content += "---\n\n"
              
              # Save documentation
              os.makedirs('docs', exist_ok=True)
              with open('docs/SCRIPTS.md', 'w', encoding='utf-8') as f:
                  f.write(docs_content)
              
              print(f"✅ Generated documentation for {len(script_docs)} scripts")
              
              return script_docs
          
          if __name__ == "__main__":
              generate_script_docs()
          EOF
      
      - name: 📝 Generate API Reference
        run: |
          python3 << 'EOF'
          import os
          import json
          from datetime import datetime
          
          def generate_api_reference():
              """Generate API reference documentation."""
              
              api_docs = f"""# 🔌 API Reference
          
          Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
          
          This document provides API reference for the development workflow integration.
          
          ## 🎯 Linear API Integration
          
          ### Authentication
          
          All Linear API calls require authentication using an API key:
          
          ```bash
          export LINEAR_API_KEY="lin_api_xxxxxxxxxxxxx"
          ```
          
          ### Core Endpoints
          
          #### Get Issues
          
          **GraphQL Query:**
          ```graphql
          query GetIssues($first: Int, $filter: IssueFilter) {{
              issues(first: $first, filter: $filter) {{
                  nodes {{
                      id
                      identifier
                      title
                      description
                      state {{ name }}
                      assignee {{ name email }}
                      team {{ key name }}
                      url
                  }}
              }}
          }}
          ```
          
          **Variables:**
          ```json
          {{
              "first": 50,
              "filter": {{
                  "team": {{"key": {{"eq": "TEAM_KEY"}}}}
              }}
          }}
          ```
          
          #### Update Issue
          
          **GraphQL Mutation:**
          ```graphql
          mutation UpdateIssue($id: String!, $input: IssueUpdateInput!) {{
              issueUpdate(id: $id, input: $input) {{
                  success
                  issue {{ id identifier }}
              }}
          }}
          ```
          
          ## 🐙 GitHub API Integration
          
          ### Authentication
          
          GitHub API calls use personal access tokens or GitHub App tokens:
          
          ```bash
          export GITHUB_TOKEN="ghp_xxxxxxxxxxxxx"
          ```
          
          ### Core Endpoints
          
          #### List Issues
          
          **REST API:**
          ```http
          GET /repos/{{owner}}/{{repo}}/issues
          Authorization: token {{GITHUB_TOKEN}}
          ```
          
          #### Create Issue
          
          **REST API:**
          ```http
          POST /repos/{{owner}}/{{repo}}/issues
          Authorization: token {{GITHUB_TOKEN}}
          Content-Type: application/json
          
          {{
              "title": "Issue title",
              "body": "Issue description",
              "labels": ["bug", "priority:high"]
          }}
          ```
          
          ## 🔄 Synchronization Workflow
          
          ### Bidirectional Sync Process
          
          1. **Linear → GitHub:**
             - Fetch Linear issues via GraphQL
             - Map Linear fields to GitHub format
             - Create/update GitHub issues
             - Link back to Linear with GitHub issue URL
          
          2. **GitHub → Linear:**
             - Fetch GitHub issues via REST API
             - Extract Linear identifiers from issue content
             - Update corresponding Linear issues
             - Maintain cross-references
          
          ### Error Handling
          
          All API calls include comprehensive error handling:
          
          - **Rate limiting:** Exponential backoff and retry
          - **Network errors:** Timeout and retry mechanisms
          - **Authentication errors:** Clear error messages
          - **Data validation:** Input sanitization and validation
          
          ## 📊 Performance Monitoring API
          
          ### Metrics Collection
          
          The performance monitoring system exposes metrics via Python API:
          
          ```python
          from performance_monitoring import PerformanceMonitoringSystem
          
          # Initialize monitoring
          monitor = PerformanceMonitoringSystem()
          
          # Start monitoring
          monitor.start_monitoring()
          
          # Get performance report
          report = monitor.get_performance_report(hours=24)
          ```
          
          ### Available Metrics
          
          - **System Metrics:** CPU, Memory, Disk, Network
          - **Application Metrics:** API response times, Script execution times
          - **Quality Metrics:** Error rates, Performance grades
          
          ## 🛡️ Security Considerations
          
          ### API Key Management
          
          - Store API keys in GitHub Secrets
          - Use environment variables in scripts
          - Rotate keys regularly
          - Monitor API usage
          
          ### Rate Limiting
          
          - Respect API rate limits
          - Implement exponential backoff
          - Cache responses when appropriate
          - Monitor usage patterns
          
          ---
          
          *This documentation is automatically generated and updated with each workflow run.*
          """
              
              os.makedirs('docs', exist_ok=True)
              with open('docs/API_REFERENCE.md', 'w', encoding='utf-8') as f:
                  f.write(api_docs)
              
              print("✅ Generated API reference documentation")
          
          if __name__ == "__main__":
              generate_api_reference()
          EOF
      
      - name: 📝 Generate Setup Guide
        run: |
          python3 << 'EOF'
          import os
          from datetime import datetime
          
          def generate_setup_guide():
              """Generate setup and installation guide."""
              
              setup_docs = f"""# 🚀 Setup Guide
          
          Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
          
          This guide will help you set up the Development Workflow - Linear ↔ GitHub Integration system.
          
          ## 📋 Prerequisites
          
          ### Required Software
          
          - **Git:** Version control system
          - **GitHub CLI:** Command-line interface for GitHub
          - **Python 3.10+:** For advanced features and monitoring
          - **Bash:** Shell for script execution
          
          ### Required Accounts
          
          - **GitHub Account:** With repository access
          - **Linear Account:** With API access
          
          ## 🔧 Installation
          
          ### 1. Clone Repository
          
          ```bash
          git clone https://github.com/franorzabal-hub/development-workflow.git
          cd development-workflow
          ```
          
          ### 2. Setup Environment
          
          ```bash
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Install GitHub CLI (if not already installed)
          # macOS:
          brew install gh
          
          # Ubuntu/Debian:
          sudo apt install gh
          
          # Authenticate with GitHub
          gh auth login
          ```
          
          ### 3. Configure API Keys
          
          #### Linear API Key
          
          1. Go to [Linear Settings → API](https://linear.app/settings/api)
          2. Create a new Personal API Key
          3. Copy the key (starts with `lin_api_`)
          
          ```bash
          export LINEAR_API_KEY="lin_api_xxxxxxxxxxxxx"
          ```
          
          #### GitHub Token (Optional)
          
          For enhanced features, configure a GitHub Personal Access Token:
          
          1. Go to [GitHub Settings → Developer Settings → Personal Access Tokens](https://github.com/settings/tokens)
          2. Generate new token with `repo` permissions
          3. Copy the token
          
          ```bash
          export GITHUB_TOKEN="ghp_xxxxxxxxxxxxx"
          ```
          
          ### 4. Initial Setup
          
          ```bash
          # Run initial setup
          ./scripts/setup-linear-states.sh
          
          # Validate dependencies
          ./scripts/validate-dependencies.sh
          
          # Optional: Install workflow aliases
          ./scripts/claude-aliases.sh install
          ```
          
          ## 🎯 Configuration
          
          ### Environment Variables
          
          Create a `.env` file or add to your shell profile:
          
          ```bash
          # Required
          export LINEAR_API_KEY="lin_api_xxxxxxxxxxxxx"
          
          # Optional
          export GITHUB_TOKEN="ghp_xxxxxxxxxxxxx"
          export LINEAR_TEAM_KEY="YOUR_TEAM_KEY"
          
          # Performance Monitoring (Optional)
          export SMTP_SERVER="smtp.gmail.com"
          export SMTP_PORT="587"
          export EMAIL_USER="your-email@gmail.com"
          export EMAIL_PASSWORD="your-app-password"
          export ALERT_RECIPIENTS="admin@company.com,dev-team@company.com"
          ```
          
          ### Linear Team Configuration
          
          ```bash
          # Get your Linear team information
          ./scripts/setup-linear-states.sh
          
          # This will output your team ID and state IDs
          # Save these for use in other scripts
          ```
          
          ## ✅ Verification
          
          ### Test Basic Functionality
          
          ```bash
          # Test Linear API connection
          curl -H "Authorization: Bearer $LINEAR_API_KEY" \\
               -H "Content-Type: application/json" \\
               -d '{{"query": "query {{ viewer {{ id name }} }}"}}' \\
               https://api.linear.app/graphql
          
          # Test GitHub CLI
          gh repo view
          
          # Test script execution
          ./scripts/validate-dependencies.sh
          ```
          
          ### Verify Workflow Integration
          
          1. Create a test Linear issue
          2. Run the sync workflow:
             ```bash
             # Manual sync test
             gh workflow run "Linear ↔ GitHub Sync" --field sync_direction=linear_to_github
             ```
          3. Check that issue appears in GitHub
          
          ## 🚀 Usage
          
          ### Basic Workflow
          
          ```bash
          # Start development for a Linear issue
          ./scripts/start-development.sh FRA-42
          
          # Run comprehensive tests
          ./scripts/test-and-validate.sh FRA-42
          
          # Create PR and finish workflow
          ./scripts/finish-development.sh FRA-42
          ```
          
          ### With Aliases (Recommended)
          
          ```bash
          # Load aliases
          source scripts/claude-workflow-aliases.sh
          
          # Simplified workflow
          claude-start FRA-42    # Start development
          claude-test FRA-42     # Run tests
          claude-finish FRA-42   # Create PR
          ```
          
          ## 🔧 Advanced Configuration
          
          ### Performance Monitoring
          
          ```bash
          # Start performance monitoring
          python3 scripts/performance-monitoring.py --action start
          
          # Generate performance report
          python3 scripts/performance-monitoring.py --action report --hours 24
          ```
          
          ### GitHub Actions Setup
          
          Add these secrets to your GitHub repository:
          
          - `LINEAR_API_KEY`: Your Linear API key
          - `LINEAR_WEBHOOK_SECRET`: Optional webhook secret
          
          ## 🆘 Troubleshooting
          
          ### Common Issues
          
          #### "Command not found: gh"
          
          Install GitHub CLI:
          ```bash
          # macOS
          brew install gh
          
          # Ubuntu/Debian
          sudo apt install gh
          ```
          
          #### "Linear API authentication failed"
          
          1. Verify your API key is correct
          2. Check the key has proper permissions
          3. Ensure key is properly exported
          
          #### "Permission denied" on scripts
          
          ```bash
          chmod +x scripts/*.sh
          ```
          
          ### Getting Help
          
          - Check the [Troubleshooting Guide](TROUBLESHOOTING.md)
          - Review [GitHub Issues](https://github.com/franorzabal-hub/development-workflow/issues)
          - Consult the [API Reference](API_REFERENCE.md)
          
          ---
          
          *For more detailed information, see the [Development Workflow Guide](DEVELOPMENT_WORKFLOW.md).*
          """
              
              os.makedirs('docs', exist_ok=True)
              with open('docs/SETUP.md', 'w', encoding='utf-8') as f:
                  f.write(setup_docs)
              
              print("✅ Generated setup guide documentation")
          
          if __name__ == "__main__":
              generate_setup_guide()
          EOF
      
      - name: 📝 Update Documentation Index
        run: |
          python3 << 'EOF'
          import os
          from datetime import datetime
          from pathlib import Path
          
          def generate_docs_index():
              """Generate documentation index."""
              
              docs_dir = Path('docs')
              if not docs_dir.exists():
                  print("Docs directory doesn't exist")
                  return
              
              # Scan for documentation files
              doc_files = []
              for doc_file in docs_dir.glob('*.md'):
                  doc_files.append({
                      'name': doc_file.name,
                      'title': doc_file.stem.replace('_', ' ').title(),
                      'path': str(doc_file),
                      'size': doc_file.stat().st_size
                  })
              
              index_content = f"""# 📚 Documentation Index
          
          Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
          
          Welcome to the Development Workflow documentation! This index provides an overview of all available documentation.
          
          ## 🚀 Getting Started
          
          New to the Development Workflow? Start here:
          
          1. **[Setup Guide](SETUP.md)** - Installation and configuration
          2. **[Development Workflow](DEVELOPMENT_WORKFLOW.md)** - How to use the system
          3. **[Scripts Documentation](SCRIPTS.md)** - Available scripts and usage
          
          ## 📖 Available Documentation
          
          | Document | Description | Size |
          |----------|-------------|------|
          """
              
              # Add main README
              readme_path = Path('README.md')
              if readme_path.exists():
                  size_kb = round(readme_path.stat().st_size / 1024, 1)
                  index_content += f"| [README.md](../README.md) | Project overview and quick start | {size_kb}KB |\n"
              
              # Add docs files
              for doc in sorted(doc_files, key=lambda x: x['name']):
                  size_kb = round(doc['size'] / 1024, 1)
                  index_content += f"| [{doc['name']}]({doc['name']}) | {doc['title']} | {size_kb}KB |\n"
              
              index_content += f"""
          ## 🔗 External Resources
          
          - [Linear API Documentation](https://developers.linear.app/)
          - [GitHub API Documentation](https://docs.github.com/en/rest)
          - [GitHub Actions Documentation](https://docs.github.com/en/actions)
          - [Repository](https://github.com/franorzabal-hub/development-workflow)
          
          ## 📊 Documentation Statistics
          
          - **Total Documents:** {len(doc_files) + 1}
          - **Last Updated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
          - **Auto-Generated:** Yes
          
          ## 🤝 Contributing to Documentation
          
          Documentation is automatically generated from source code and templates. To contribute:
          
          1. Update source code comments and docstrings
          2. Modify documentation templates in `.github/workflows/docs.yml`
          3. Submit pull requests with documentation improvements
          
          ---
          
          *This index is automatically generated and updated with each documentation build.*
          """
              
              with open('docs/README.md', 'w', encoding='utf-8') as f:
                  f.write(index_content)
              
              print(f"✅ Generated documentation index with {len(doc_files)} documents")
          
          if __name__ == "__main__":
              generate_docs_index()
          EOF
      
      - name: 📦 Upload Generated Documentation
        uses: actions/upload-artifact@v3
        with:
          name: generated-docs
          path: docs/
      
      - name: 📊 Documentation Generation Summary
        run: |
          echo "## 📝 Documentation Generation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "docs" ]; then
            doc_count=$(find docs/ -name "*.md" | wc -l)
            total_size=$(du -sh docs/ | cut -f1)
            
            echo "✅ **Documentation generated successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Documents created:** $doc_count" >> $GITHUB_STEP_SUMMARY
            echo "- **Total size:** $total_size" >> $GITHUB_STEP_SUMMARY
            echo "- **Generation time:** $(date)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "**Generated documents:**" >> $GITHUB_STEP_SUMMARY
            for doc in docs/*.md; do
              if [ -f "$doc" ]; then
                size=$(du -h "$doc" | cut -f1)
                echo "- \`$(basename "$doc")\` ($size)" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "❌ **Documentation generation failed!**" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 3: Documentation Summary
  docs-summary:
    name: 📋 Documentation Summary
    runs-on: ubuntu-latest
    needs: [validate-docs, generate-docs]
    if: always()
    
    steps:
      - name: 📊 Generate Final Summary
        run: |
          echo "# 📚 Documentation Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation Validation | ${{ needs.validate-docs.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation Generation | ${{ needs.generate-docs.result == 'success' && '✅ Completed' || (needs.generate-docs.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.validate-docs.result }}" == "success" ]]; then
            echo "✅ **Documentation workflow completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All documentation has been validated and updated." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Documentation workflow had issues!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the validation results and fix any issues." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** ${{ github.event.inputs.action || 'validate_and_generate' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Generation:** ${{ github.event.inputs.force_generation || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository Documentation](https://github.com/${{ github.repository }}/tree/main/docs)" >> $GITHUB_STEP_SUMMARY
          echo "- [README](https://github.com/${{ github.repository }}/blob/main/README.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Workflow Runs](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
